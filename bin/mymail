#!/bin/sh
#
# Copyright (c) 2021 Alexander MÃ¶ller <alexander.moeller@detmold.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

PATH=$PATH:$HOME/bin

# use UTF-8 everywhere
export LANG=en_GB.UTF-8
export LC_CTYPE=en_GB.UTF-8

_delete_pop=0
_force_client=0
_open_without_asking=0
_unlock_without_asking=0

check_mutt() {
	if [ "${_force_client}" -eq 1 ] ; then
		MUTT="${_mutt}"
	else
		if command -v neomutt > /dev/null ; then
			MUTT='neomutt'
		else
			MUTT='mutt'
		fi
	fi
}

check_unlock() {
	if [ "${_unlock_without_asking}" -eq 1 ] ; then
		_unlock=y
	else
		printf '%s' "Unlock accounts? [y/n] "
		IFS= read -r _unlock
	fi
	if [ "${_unlock}" = "y" ] || [ "${_unlock}" = "" ] ; then
		unlock
	elif [ "${_unlock}" = "n" ] ; then
		run_mutt
	else
		echo "Unknown option."
		check_unlock
	fi
}

get_new() {
	if command -v getmail > /dev/null ; then
		[ "${_delete_pop}" -eq 0 ] \
			&& getpop='getmail -d' \
			|| getpop='getmail -l'
	else
		[ "${_delete_pop}" -eq 0 ] \
			&& getpop='mpop --keep=off' \
			|| getpop='mpop --keep=on'
	fi
	TERM=xterm-256color $getpop -a
	TERM=xterm-256color mbsync -a
	notmuch new
}

run_mutt() {
	TERM=xterm-256color $MUTT
}

unlock() {
	get_new
	if [ "${_open_without_asking}" -eq 0 ] ; then
		emailinfo -q greeting
		printf '%s' "Open $MUTT? [y/n] "
		IFS= read -r _open
	fi
	if [ "${_open_without_asking}" -eq 1 ] || [ "${_open}" = "y" ] || [ "${_open}" = "" ] ; then
		[ -n "$TMUX" ] && tmux rename-window email
		run_mutt
	fi
}

usage() { cat << USAGE
${0##*/} - simple (neo)mutt manager
usage: ${0##*/}	[-m client] [-y] command
USAGE
	exit 1
}

while getopts m:doy arg; do
	case ${arg} in
		d) _delete_pop=1 ;;
		m) _force_client=1 && _mutt="${OPTARG}" ;;
		o) _open_without_asking=1 ;;
		y) _unlock_without_asking=1 ;;
		*) usage
	esac
done
shift $((OPTIND - 1))

if pgrep mutt > /dev/null ; then
	check_mutt
	run_mutt
else
	check_mutt
	check_unlock
fi
