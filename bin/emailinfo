#!/bin/sh
#
# Copyright (c) 2023 Alexander MÃ¶ller <alexander.moeller@detmold.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

_fail="\033[31m" # red
_warn="\033[33m" # yellow
_alrt="\033[34m" # blue
_rset="\033[0m"

_sep=1

_mailboxes=$(find "$HOME"/Emails -type d -depth 1 \
           | grep -v 'notmuch' | cut -d '/' -f 5 | sort)
_unread=$(find "$HOME"/Emails/*/INBOX -type f \
        | grep -cv -e '.uidvalidity' -e '.mbsyncstate')
_drafts=$(find "$HOME"/Emails/*/Drafts \
               "$HOME"/Emails/*/Entwurf -type f \
        | grep -cv -e '.uidvalidity' -e '.mbsyncstate')
_upcoming=$(find "$HOME"/Emails/*/UPCOMING -type f \
          | grep -cv -e '.uidvalidity' -e '.mbsyncstate')

heading() {
	if [ "${_sep}" -eq 1 ] ; then
		if [ "${_drafts}" -gt 0 ] \
			|| [ "${_unread}" -gt 0 ] \
			|| [ "${_upcoming}" -gt 0 ] \
			|| [ "$(check_mutt_mailboxes | wc -l)" -gt 0 ] ; then
			drawsep 'EMAIL'
		fi
	fi
}

show_drafts() {
	if [ "${_drafts}" -gt 0 ] ; then
		printf -- "---> Drafts: ${_alrt}%s${_rset}\n" "${_drafts}"
		for box in ${_mailboxes} ; do
			_drafts=$(find "$HOME"/Emails/"${box}"/Drafts \
						   "$HOME"/Emails/"${box}"/Entwurf -type f 2> /dev/null \
					| grep -cv -e '.uidvalidity' -e '.mbsyncstate')
			if [ "${_drafts}" -gt 0 ] ; then
				printf "${_alrt}%4.4s${_rset} in %s\n" "${_drafts}" "${box}"
			fi
		done
	fi
}

show_unread() {
	if [ "${_unread}" -gt 0 ] ; then
		printf -- "---> Unread emails: ${_fail}%s${_rset}\n" "${_unread}"
		for box in ${_mailboxes} ; do
			_unread=$(find "$HOME"/Emails/"${box}"/INBOX -type f \
					| grep -cv -e '.uidvalidity' -e '.mbsyncstate')
			if [ "${_unread}" -gt 0 ] ; then
				printf "${_fail}%4.4s${_rset} in %s\n" "${_unread}" "${box}"
			fi
		done
	fi
}

show_upcoming() {
	if [ "${_upcoming}" -gt 0 ] ; then
		printf -- "---> Upcoming: ${_warn}%s${_rset}\n" "${_upcoming}"
		for box in ${_mailboxes} ; do
			_upcoming=$(find "$HOME"/Emails/"${box}"/UPCOMING -type f 2> /dev/null | grep -cv -e '.uidvalidity' -e '.mbsyncstate')
			if [ "${_upcoming}" -gt 0 ] ; then
				printf "${_warn}%4.4s${_rset} in %s\n" "${_upcoming}" "${box}"
			fi
		done
	fi
}

show_spam() {
	_spam=$(find "$HOME"/Emails/*/Spam \
	             "$HOME"/Emails/*/'Unerw&APw-nscht' -type f \
	      | grep -cv -e '.uidvalidity' -e '.mbsyncstate')
	if [ "${_spam}" -gt 0 ] ; then
		printf -- "---> Spam: ${_alrt}%s${_rset}\n" "${_spam}"
		for box in ${_mailboxes} ; do
			_spam=$(find "$HOME"/Emails/"${box}"/Spam \
						   "$HOME"/Emails/"${box}"/'Unerw&APw-nscht' -type f 2> /dev/null \
					| grep -cv -e '.uidvalidity' -e '.mbsyncstate')
			if [ "${_spam}" -gt 0 ] ; then
				printf "${_alrt}%4.4s${_rset} in %s\n" "${_spam}" "${box}"
			fi
		done
	fi
}

check_missing() {
	if [ "$(check_mutt_mailboxes | wc -l)" -gt 0 ] ; then
		echo "---> Missing mailboxes:"
		check_mutt_mailboxes
	fi
}

usage() { cat << USAGE
${0##*/} - overview over email inbox state
usage: ${0##*/} [-q] command (check/drafts/greeting/help/unread/Upcoming)
USAGE
	exit 1
}

while getopts q arg; do
	case ${arg} in
		q) _sep=0 ;;
		*) usage
	esac
done
shift $((OPTIND - 1))

heading
case $1 in
c*)
	show_spam
	check_missing
	;;
d*)
	show_drafts
	;;
g*)
	show_drafts
	show_unread
	check_missing
	;;
h*)
	usage
	;;
u*)
	show_unread
	;;
U*)
	show_upcoming
	;;
*)
	show_drafts
	show_unread
	show_upcoming
	show_spam
	check_missing
	;;
esac
